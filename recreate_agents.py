#!/usr/bin/env python3
"""
Agent Recreation Script - Auto-generated by fix_token_limits.py

This script recreates agents that have token limit issues.
Run this script AFTER backing up any important agent data.
"""

import sys
sys.path.append('.')

from letta_client import Letta
from spds import config
from spds.spds_agent import SPDSAgent

def get_client():
    """Get authenticated Letta client."""
    if config.LETTA_ENVIRONMENT == "SELF_HOSTED" and config.LETTA_SERVER_PASSWORD:
        return Letta(token=config.LETTA_SERVER_PASSWORD, base_url=config.LETTA_BASE_URL)
    elif config.LETTA_API_KEY:
        return Letta(token=config.LETTA_API_KEY, base_url=config.LETTA_BASE_URL)
    else:
        return Letta(base_url=config.LETTA_BASE_URL)

def main():
    print("üîß Agent Recreation Script")
    print("=" * 50)
    
    client = get_client()
    
    # Agents to recreate (with token limit issues):

    print("\nüîÑ Recreating agent: Casey - Engineer")
    try:
        # Delete old agent with token issues (CAUTION: This removes all conversation history)
        # client.agents.delete(agent_id="agent-1d9ee942-70b4-4efd-a057-dec444eacfcb")
        print("   ‚ö†Ô∏è  Old agent deletion commented out for safety")
        
        # Create new agent with correct token limits
        # Note: You may need to customize persona/expertise based on the original agent
        new_agent = SPDSAgent.create_new(
            name="Casey - Engineer_fixed",
            persona="A helpful AI assistant",  # TODO: Customize based on original
            expertise=["general"],  # TODO: Customize based on original  
            client=client,
            model="openai/gpt-4"
        )
        print(f"   ‚úÖ Created new agent: {new_agent.name} with max_tokens=2048")
        
    except Exception as e:
        print(f"   ‚ùå Failed to recreate Casey - Engineer: {e}")

    print("\nüîÑ Recreating agent: Jordan - Designer")
    try:
        # Delete old agent with token issues (CAUTION: This removes all conversation history)
        # client.agents.delete(agent_id="agent-c56117ef-4008-4495-ad2d-003d0bdce13d")
        print("   ‚ö†Ô∏è  Old agent deletion commented out for safety")
        
        # Create new agent with correct token limits
        # Note: You may need to customize persona/expertise based on the original agent
        new_agent = SPDSAgent.create_new(
            name="Jordan - Designer_fixed",
            persona="A helpful AI assistant",  # TODO: Customize based on original
            expertise=["general"],  # TODO: Customize based on original  
            client=client,
            model="openai/gpt-4"
        )
        print(f"   ‚úÖ Created new agent: {new_agent.name} with max_tokens=2048")
        
    except Exception as e:
        print(f"   ‚ùå Failed to recreate Jordan - Designer: {e}")

    print("\nüîÑ Recreating agent: Alex - Project Manager")
    try:
        # Delete old agent with token issues (CAUTION: This removes all conversation history)
        # client.agents.delete(agent_id="agent-b19181d9-fa49-4840-9a69-096fc18cf23f")
        print("   ‚ö†Ô∏è  Old agent deletion commented out for safety")
        
        # Create new agent with correct token limits
        # Note: You may need to customize persona/expertise based on the original agent
        new_agent = SPDSAgent.create_new(
            name="Alex - Project Manager_fixed",
            persona="A helpful AI assistant",  # TODO: Customize based on original
            expertise=["general"],  # TODO: Customize based on original  
            client=client,
            model="openai/gpt-4"
        )
        print(f"   ‚úÖ Created new agent: {new_agent.name} with max_tokens=2048")
        
    except Exception as e:
        print(f"   ‚ùå Failed to recreate Alex - Project Manager: {e}")

    print("\nüîÑ Recreating agent: Adaptive Secretary")
    try:
        # Delete old agent with token issues (CAUTION: This removes all conversation history)
        # client.agents.delete(agent_id="agent-24e9a246-5c80-4e28-8c11-fe00d1ea0722")
        print("   ‚ö†Ô∏è  Old agent deletion commented out for safety")
        
        # Create new agent with correct token limits
        # Note: You may need to customize persona/expertise based on the original agent
        new_agent = SPDSAgent.create_new(
            name="Adaptive Secretary_fixed",
            persona="A helpful AI assistant",  # TODO: Customize based on original
            expertise=["general"],  # TODO: Customize based on original  
            client=client,
            model="openai/gpt-4"
        )
        print(f"   ‚úÖ Created new agent: {new_agent.name} with max_tokens=2048")
        
    except Exception as e:
        print(f"   ‚ùå Failed to recreate Adaptive Secretary: {e}")

    print("\nüîÑ Recreating agent: companion-agent-1753201615269")
    try:
        # Delete old agent with token issues (CAUTION: This removes all conversation history)
        # client.agents.delete(agent_id="agent-82b34704-b43f-4c69-93e7-1c24c4686e6d")
        print("   ‚ö†Ô∏è  Old agent deletion commented out for safety")
        
        # Create new agent with correct token limits
        # Note: You may need to customize persona/expertise based on the original agent
        new_agent = SPDSAgent.create_new(
            name="companion-agent-1753201615269_fixed",
            persona="A helpful AI assistant",  # TODO: Customize based on original
            expertise=["general"],  # TODO: Customize based on original  
            client=client,
            model="openai/gpt-4"
        )
        print(f"   ‚úÖ Created new agent: {new_agent.name} with max_tokens=2048")
        
    except Exception as e:
        print(f"   ‚ùå Failed to recreate companion-agent-1753201615269: {e}")

    print("\nüîÑ Recreating agent: Hypatia-sleeptime")
    try:
        # Delete old agent with token issues (CAUTION: This removes all conversation history)
        # client.agents.delete(agent_id="agent-b09107c2-43a3-462a-acfb-c35ccc1f552f")
        print("   ‚ö†Ô∏è  Old agent deletion commented out for safety")
        
        # Create new agent with correct token limits
        # Note: You may need to customize persona/expertise based on the original agent
        new_agent = SPDSAgent.create_new(
            name="Hypatia-sleeptime_fixed",
            persona="A helpful AI assistant",  # TODO: Customize based on original
            expertise=["general"],  # TODO: Customize based on original  
            client=client,
            model="openai/gpt-4"
        )
        print(f"   ‚úÖ Created new agent: {new_agent.name} with max_tokens=2048")
        
    except Exception as e:
        print(f"   ‚ùå Failed to recreate Hypatia-sleeptime: {e}")

    print("\nüîÑ Recreating agent: Hypatia")
    try:
        # Delete old agent with token issues (CAUTION: This removes all conversation history)
        # client.agents.delete(agent_id="agent-1670c5f8-7808-408d-b66f-1f135397878b")
        print("   ‚ö†Ô∏è  Old agent deletion commented out for safety")
        
        # Create new agent with correct token limits
        # Note: You may need to customize persona/expertise based on the original agent
        new_agent = SPDSAgent.create_new(
            name="Hypatia_fixed",
            persona="A helpful AI assistant",  # TODO: Customize based on original
            expertise=["general"],  # TODO: Customize based on original  
            client=client,
            model="openai/gpt-4"
        )
        print(f"   ‚úÖ Created new agent: {new_agent.name} with max_tokens=2048")
        
    except Exception as e:
        print(f"   ‚ùå Failed to recreate Hypatia: {e}")

    print("\n‚úÖ Agent recreation completed!")
    print("üí° Remember to update any scripts/configs that reference the old agent IDs")

if __name__ == "__main__":
    main()
